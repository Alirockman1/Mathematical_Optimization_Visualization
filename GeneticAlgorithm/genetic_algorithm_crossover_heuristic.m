function children = genetic_algorithm_crossover_heuristic(parents,fitnessValue,varargin)
%GENETIC_ALGORITHM_CROSSOVER_HEURISTIC performs heuristic crossover operation
%   for genetic algorithm optimization. This function creates offspring by
%   combining two parents where the better parent is preserved and the second
%   offspring is generated by extrapolating from the better parent away from
%   the worse parent.
%
%	CHILDREN = GENETIC_ALGORITHM_CROSSOVER_HEURISTIC(PARENTS,FITNESSVALUE) performs
%	heuristic crossover on two PARENTS using their FITNESS values to determine
%	which parent has better fitness. The crossover creates two children where
%	the first child is identical to the better parent, and the second child
%	is generated by extrapolating from the better parent.
%
%	CHILDREN = GENETIC_ALGORITHM_CROSSOVER_HEURISTIC(PARENTS,FITNESSVALUE,VARARGIN)
%	allows for additional options to be passed (currently unused but maintained
%	for consistency with other crossover functions).
%
%   The crossover operation:
%   1. Identifies the parent with better fitness (higher fitness value)
%   2. First child = better parent (unchanged)
%   3. Second child = better parent + random_factor * (better parent - worse parent)
%
%   This method promotes exploitation of good solutions by moving away from
%   worse solutions in the direction of better ones.
%
%   Input:
%		- PARENTS : (2,nDesignVariable) double - two parent individuals
%		- FITNESSVALUE : (2,1) double - fitness values corresponding to parents
%		- VARARGIN : additional options (currently unused)
%
%   Output:
%		- CHILDREN : (2,nDesignVariable) double - two offspring individuals
%
%   Example:
%       parents = [1.0, 2.0; 3.0, 1.0];
%       fitnessValue = [0.5; 0.8];  % Second parent has better fitness
%       children = genetic_algorithm_crossover_heuristic(parents, fitnessValue);
%       % children(1,:) = [3.0, 1.0] (better parent)
%       % children(2,:) = extrapolated from better parent
%
%   See also GENETIC_ALGORITHM_CROSSOVER_ARITHMETIC, GENETIC_ALGORITHM_CROSSOVER_VARIABLE_EXCHANGE, OPTIMIZATION_GENETIC_ALGORITHM
%   
%   Copyright 2025 Eduardo Rodrigues Della Noce
%   SPDX-License-Identifier: Apache-2.0

%   Licensed under the Apache License, Version 2.0 (the "License");
%   you may not use this file except in compliance with the License.
%   You may obtain a copy of the License at
%   
%       http://www.apache.org/licenses/LICENSE-2.0
%   
%   Unless required by applicable law or agreed to in writing, software
%   distributed under the License is distributed on an "AS IS" BASIS,
%   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%   See the License for the specific language governing permissions and
%   limitations under the License.

	if(fitnessValue(2)>=fitnessValue(1))
		betterFitnessIndex = 2;
		worseFitnessIndex = 1;
	else
		betterFitnessIndex = 1;
		worseFitnessIndex = 2;
	end

	randomNumber = rand;
	children(1,:) = parents(betterFitnessIndex,:);
	children(2,:) = parents(betterFitnessIndex,:) + randomNumber.*(parents(betterFitnessIndex,:) - parents(worseFitnessIndex,:));
end